import torch.types
import os
from config import Config
from sklearn.model_selection import StratifiedShuffleSplit
from transform import Compose,ToTensor,RandomHorizontalFlip,RandomVerticalFlip,Resize,Normalize
from mydataset import Mydataset
from model import Alexnet
import torch.nn as nn
from torch.utils.data import DataLoader
from util import train,val,test
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
# import optuna

# TODO: 搭建模型(Alexnet,VGG,Resnet)
def createModel(device,pretrain=False):

    model = Alexnet(ch_in=3,cls_num=3)
    model = model.to(device=device)

    return model


# TODO: 构建dataset（train+val+test）
def readDatalist(root,className):
    nameDic = {}
    images = []
    labels = []
    with open(className, 'r') as files:
        names = files.read().strip().split()
        for i, name in enumerate(names):
            nameDic[str(name)] = i

    for case in sorted(os.listdir(root)):
        imges = sorted(os.listdir(os.path.join(root, case)))
        for img in imges:
            images.append(os.path.join(os.path.join(root, case), img))
            labels.append(nameDic[case])

    return images, labels

def readLabel(classnName,label):
    nameDic = {}
    with open(classnName, 'r') as files:
        names = files.read().strip().split()
        for i, name in enumerate(names):
            nameDic[str(name)] = i

    strName = {f"{i}":key for i,key in enumerate(nameDic)}
    predictLabel = strName[str(label.cpu().item())]
    return predictLabel

def main():
    arg = Config()
    device = torch.device("cuda" if torch.cuda.is_available() else 'cpu')
    testsImgPath,testsLabelPath = readDatalist(arg.testRoot,arg.className)

    test_files = [{"image": image, "label": label} for image, label in zip(testsImgPath, testsLabelPath)]

    train_transform = Compose([
        Resize((227,227),interpolation='bilinear'),
        ToTensor(),
        RandomVerticalFlip(),
        RandomHorizontalFlip(),
        Normalize(),
    ])

    test_dataset = Mydataset(test_files,train_transform)

    model = createModel(device,pretrain=False)
    model_path = os.path.join(arg.saveWeights,"best_model.pth")

    check_point = torch.load(model_path,map_location='cpu')
    model.load_state_dict(check_point["model"])
    model.to(device)
    print("load model")

    data = test_dataset[50]

    image = data[0].to(device)
    image = torch.unsqueeze(image,dim=0)
    label = readLabel(arg.className,data[1])
    output = model(image)
    predict_label = readLabel(arg.className,torch.argmax(output,dim=1)) 

    plt.figure(figsize=(10,8))
    plt.imshow(torch.squeeze(image).cpu().permute(1, 2, 0), cmap='gray')
    plt.title(f"Predicted label: {predict_label}, True label: {label}")
    plt.show()



if __name__ == "__main__":
    main()